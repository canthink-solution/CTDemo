<?php

include_once '../../init.php';

// Check if request comes from within the application
if (!isAjax()) error_page('403');

use Sys\framework\Logger;

/**
 * Returns the SQL query generated by the 'users' table query builder.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function getSql($request = null)
{
    json(db()->table('users')->toSql());
}

/**
 * Retrieves all data from the 'users' table.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function getData($request = null)
{
    json(db()->table('users')->select('id,name')->get());
}

/**
 * Retrieves data from the 'users' table with a specified limit.
 * 
 * @param mixed $request Optional request data containing the 'limit' parameter
 * @return void
 */
function getDataLimit($request = null)
{
    $limit = $request['limit']; // Not safe from XSS injection
    json(db()->table('users')->select('id,name')->limit($limit)->get());
}

/**
 * Retrieves data from the 'users' table with specified conditions.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function getDataConditions($request = null)
{
    json(db()->table('users')->select('id,name')->where('user_status', 3)->get());
    // json(db()->table('users')->select('id,name')->where('user_status', 3)->orWhere('user_status', 4)->get());
    // json(db()->table('users')->select('id,name')->whereIn('user_status', [1, 2])->get());
    // json(db()->table('users')->select('id,name')->whereNotIn('user_status', [1, 2])->get());
    // json(db()->table('users')->select('id,name')->whereBetween('user_status', 2, 4)->get());
}

/**
 * Fetches data from the 'users' table with specified conditions using fetch method.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function fetchDataConditions($request = null)
{
    json(db()->table('users')->select('id,name')->where('user_status', 3)->fetch());
}

/**
 * Retrieves paginated data from the 'users' table.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function getDataPagination($request = null)
{
    // Get the current page number from the request data
    $page = request('page'); // Use method request() instead of $request for security from XSS Payload

    // Define the number of records to display per page
    $limitPerPage = 2;

    // Retrieve paginated data from the 'users' table using the specified page and limit per page
    json(db()->table('users')->paginate($page, $limitPerPage));
}

/**
 * Retrieves the total count of records from the 'users' table.
 * 
 * @param mixed $request Optional request data
 * @return void
 */
function getDataCountTotal($request = null)
{
    // Retrieve the total count of records from the 'users' table
    json(db()->table('users')->count());
}

/**
 * Retrieves data for a modal from the 'users' table based on the provided ID.
 * 
 * @param mixed $request Optional request data containing the 'id' parameter
 * @return void
 */
function getDataModal($request = null)
{
    // Retrieve data for a modal from the 'users' table based on the provided ID
    json(db()->table('users')->where('id', request('id'))->fetch());
}

/**
 * Fetches data with join conditions based on request parameters.
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function getDataJoinConditions($request = null)
{
    $db = db('slave');

    $data = $db->table('users')
        ->select('users.id,users.name,users.nickname,school_users.school_profile_id,schools.name AS company_name')
        ->join('school_users', 'users.id=school_users.user_id', 'left')
        ->join('schools', 'school_users.school_id=schools.id', 'left')
        ->paginate(2);

    $db->disconnect('slave');
    json($data);
}

/**
 * Fetches data from the slave database with specific conditions.
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function getDataSlaveDBConditions($request = null)
{
    $db = db('slave');

    $data = $db->table('users')
        ->select('id,name,nickname, email')
        ->with('profile', 'school_users', 'user_id', 'id', function ($db) {
            $db->select('id,user_id,school_id,school_profile_id')
                ->with('schools', 'schools', 'id', 'school_id', function ($db) {
                    $db->select('id,name,contact_name');
                });
        })
        ->paginate(request('current_page'));

    $db->disconnect('slave');

    json($data);
}

/**
 * Test validation data
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function getValidationData($request = null)
{
    // single array
    // $data = [
    //     'name' => NULL,
    //     'nickname' => '123',
    //     'email' => 'faizzul0312@gmail.com',
    //     'age' => 29,
    //     'dob' => '1995-01-01',
    //     'address' => 'asd123',
    //     'role' => 'admin',
    // ]; 

    // associate array
    $data = [
        [
            'name' => 'This is Test user',
            'nickname' => '123',
            'email' => 'faizzul0312@gmail.com',
            'age' => 29,
            'dob' => '1995-01-01',
            'address' => 'asd123',
            'role' => 'admin',
        ],
        [
            'name' => 'This is Test user 2',
            'nickname' => '23',
            'email' => 'faizzul02@gmail.com',
            'age' => 292,
            'dob' => '1995-01-01',
            'address' => 'asd123',
            'role' => 'admin',
        ]
    ];

    $rules = [
        'name' => 'required|string|minLength:5|maxLength:255',
        'nickname' => 'string|minLength:2|maxLength:5|required',
        'email' => 'required|email|minLength:5|maxLength:50',
        'age' => 'integer|maxLength:3',
        'dob' => 'date',
        'address' => 'required|string|minLength:5|maxLength:10',
        // 'role' => 'required|string'
    ];

    $check_validate = validate($data, $rules);

    json($check_validate['result'] ? ['code' => 200, 'data' => NULL] : $check_validate['error']);
}

/**
 * Test logger class
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function testLoggerClass($request = null)
{
    log_message('debug', 'This is the debug message');
    log_message('warning', 'This is the warning message');
    log_message('info', 'This is the info message');
    log_message('error', 'This is the error message');
}

/**
 * Test insert/create function
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function testInsertFunc($request = null)
{
    $result = db()->insert('entity_address', ['entity_type' => 'Test entity_type', 'entity_id' => 2, 'ids' => 23]);
    json($result);
}

/**
 * Test update function
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function testUpdateFunc($request = null)
{
    $result = db()->update(
        'entity_address',
        ['entity_type' => 'Test entity_type update', 'entity_id' => 2, 'ids' => 23],
        ['id' => 4]
    );
    json($result);
}

/**
 * Test delete function
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function testDeleteFunc($request = null)
{
    $result = db()->delete('entity_address', ['id' => 5]);
    json($result);
}

/**
 * Test Task Runner function
 *
 * @param array|null $request The request parameters.
 * @return void
 */
function testRunnerFunc($request = null)
{
    $task = TaskRunParallel(); // create new object 
    $task->setMaxConcurrentTasks(3);
    $task->setLogPath('logs/TestCase.log');
    // Add 1000 tasks
    for ($i = 1; $i <= 1000; $i++) {
        $task->addTask("TestCase{$i}.php", ["param1", "param2", "param3"]);
    }
    $task->run();
}
